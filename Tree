#include<iostream>
using namespace std;
struct node{
    node*left;
    int data;
    node*right;
};
node*root=NULL;
node* Insert(node*r,int item);
node*inserforuser(int item);
void preorder(node *r);
void inorder(node*r);
void postorder(node*r);
node* Search(node*r,int item);
bool Search(int item);
node*findmin(node*r);
node*findmax(node*r);
node*Delete(node*r,int item);
void Delete(int item);
int main ()
{

    return 0;
}
node* Insert(node*r,int item)
{
    node*newnode=new node;
    newnode->data=item;
    if(root==NULL)
    {
        root=newnode;
        newnode->right=NULL;
        newnode->left=NULL;
    }
    else if(root->data>item)
    {
    root->left=Insert(root->left,item);
    }
    else
    {
        root->right=Insert(root->right,item);
    }
}
node*inserforuser(int item)
{
    Insert(root,item);
}
void preorder(node *r){
    if(r==NULL)
    {return; }
    cout<<r->data<<endl;
    preorder(r->left);
    preorder(r->right);
}
void inorder(node*r)
{
    if(r==NULL)
    {
        return ;
    }
    inorder(r->left);
    cout<<r->data<<endl;
    inorder(r->right);
}
void postorder(node*r)
{
    if(r==NULL)
    {
        return ;
    }
    postorder(r->left);
    postorder(r->right);
    cout<<r->data<<endl;
}
node* Search(node*r,int item)
{
     if(r->data==item)
    {
        return r;
    }
    else if(r->data>item)
    {Search(r->left,item);}
    else {
        Search(r->right,item);

    }
}
bool Search(int item)
{
    Search(root,item);
    if(root==NULL)
    {return false;}
    else{
        return true;
    }
}
node*findmin(node*r)
{
    if(r==NULL)
    {return NULL;}
    else if(r->left==NULL)
    {return r;}
    else
    {findmin(r->left);}
}
node*findmax(node*r)
{
    if(r==NULL)
    {return NULL;}
    else if(r->right==NULL)
    {return r;}
    else
    {findmin(r->right);}
}
node*Delete(node*r,int item)
{
    if(r==NULL)
    {return NULL;}
    else if(item<r->data)
    {
     Delete(r->left,item);
    }
    else if (item>r->data)
    {
    Delete(r->right,item);
    }
    else
    {
        if(r->right==NULL&&r->left==NULL)
        {delete r;}
        else if(r->right==NULL&&r->left!=NULL)
        {
            r->data=r->left->data;
            delete r->left;
        }
        else if(r->right!=NULL&&r->left==NULL)
        {
            r->data=r->right->data;
        delete r->right;
        }
        else
        {
            r->data=r->left->right->data;
            delete r->left->right;
            //or r->data=r->right->left->data;
            //delete r->right->left;
        }
    }
}
void Delete(int item)
{
    Delete(root,item);
}
